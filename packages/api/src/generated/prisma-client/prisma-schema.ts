// Code generated by Prisma (prisma@1.28.5). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type Agent {
  createdAt: DateTime!
  endUser: EndUser
  id: ID!
  nickname: String!
  email: String!
  tag: String
  updatedAt: DateTime!
  ownedNetworks(where: NetworkWhereInput, orderBy: NetworkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Network!]
  networks(where: NetworkWhereInput, orderBy: NetworkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Network!]
}

type AgentConnection {
  pageInfo: PageInfo!
  edges: [AgentEdge]!
  aggregate: AggregateAgent!
}

input AgentCreateInput {
  endUser: EndUserCreateOneWithoutAgentsInput
  nickname: String!
  email: String!
  tag: String
  ownedNetworks: NetworkCreateManyWithoutMasterInput
  networks: NetworkCreateManyWithoutSlavesInput
}

input AgentCreateManyWithoutEndUserInput {
  create: [AgentCreateWithoutEndUserInput!]
  connect: [AgentWhereUniqueInput!]
}

input AgentCreateManyWithoutNetworksInput {
  create: [AgentCreateWithoutNetworksInput!]
  connect: [AgentWhereUniqueInput!]
}

input AgentCreateOneWithoutOwnedNetworksInput {
  create: AgentCreateWithoutOwnedNetworksInput
  connect: AgentWhereUniqueInput
}

input AgentCreateWithoutEndUserInput {
  nickname: String!
  email: String!
  tag: String
  ownedNetworks: NetworkCreateManyWithoutMasterInput
  networks: NetworkCreateManyWithoutSlavesInput
}

input AgentCreateWithoutNetworksInput {
  endUser: EndUserCreateOneWithoutAgentsInput
  nickname: String!
  email: String!
  tag: String
  ownedNetworks: NetworkCreateManyWithoutMasterInput
}

input AgentCreateWithoutOwnedNetworksInput {
  endUser: EndUserCreateOneWithoutAgentsInput
  nickname: String!
  email: String!
  tag: String
  networks: NetworkCreateManyWithoutSlavesInput
}

type AgentEdge {
  node: Agent!
  cursor: String!
}

enum AgentOrderByInput {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  nickname_ASC
  nickname_DESC
  email_ASC
  email_DESC
  tag_ASC
  tag_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type AgentPreviousValues {
  createdAt: DateTime!
  id: ID!
  nickname: String!
  email: String!
  tag: String
  updatedAt: DateTime!
}

input AgentScalarWhereInput {
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  nickname: String
  nickname_not: String
  nickname_in: [String!]
  nickname_not_in: [String!]
  nickname_lt: String
  nickname_lte: String
  nickname_gt: String
  nickname_gte: String
  nickname_contains: String
  nickname_not_contains: String
  nickname_starts_with: String
  nickname_not_starts_with: String
  nickname_ends_with: String
  nickname_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  tag: String
  tag_not: String
  tag_in: [String!]
  tag_not_in: [String!]
  tag_lt: String
  tag_lte: String
  tag_gt: String
  tag_gte: String
  tag_contains: String
  tag_not_contains: String
  tag_starts_with: String
  tag_not_starts_with: String
  tag_ends_with: String
  tag_not_ends_with: String
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [AgentScalarWhereInput!]
  OR: [AgentScalarWhereInput!]
  NOT: [AgentScalarWhereInput!]
}

type AgentSubscriptionPayload {
  mutation: MutationType!
  node: Agent
  updatedFields: [String!]
  previousValues: AgentPreviousValues
}

input AgentSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: AgentWhereInput
  AND: [AgentSubscriptionWhereInput!]
  OR: [AgentSubscriptionWhereInput!]
  NOT: [AgentSubscriptionWhereInput!]
}

input AgentUpdateInput {
  endUser: EndUserUpdateOneWithoutAgentsInput
  nickname: String
  email: String
  tag: String
  ownedNetworks: NetworkUpdateManyWithoutMasterInput
  networks: NetworkUpdateManyWithoutSlavesInput
}

input AgentUpdateManyDataInput {
  nickname: String
  email: String
  tag: String
}

input AgentUpdateManyMutationInput {
  nickname: String
  email: String
  tag: String
}

input AgentUpdateManyWithoutEndUserInput {
  create: [AgentCreateWithoutEndUserInput!]
  delete: [AgentWhereUniqueInput!]
  connect: [AgentWhereUniqueInput!]
  set: [AgentWhereUniqueInput!]
  disconnect: [AgentWhereUniqueInput!]
  update: [AgentUpdateWithWhereUniqueWithoutEndUserInput!]
  upsert: [AgentUpsertWithWhereUniqueWithoutEndUserInput!]
  deleteMany: [AgentScalarWhereInput!]
  updateMany: [AgentUpdateManyWithWhereNestedInput!]
}

input AgentUpdateManyWithoutNetworksInput {
  create: [AgentCreateWithoutNetworksInput!]
  delete: [AgentWhereUniqueInput!]
  connect: [AgentWhereUniqueInput!]
  set: [AgentWhereUniqueInput!]
  disconnect: [AgentWhereUniqueInput!]
  update: [AgentUpdateWithWhereUniqueWithoutNetworksInput!]
  upsert: [AgentUpsertWithWhereUniqueWithoutNetworksInput!]
  deleteMany: [AgentScalarWhereInput!]
  updateMany: [AgentUpdateManyWithWhereNestedInput!]
}

input AgentUpdateManyWithWhereNestedInput {
  where: AgentScalarWhereInput!
  data: AgentUpdateManyDataInput!
}

input AgentUpdateOneRequiredWithoutOwnedNetworksInput {
  create: AgentCreateWithoutOwnedNetworksInput
  update: AgentUpdateWithoutOwnedNetworksDataInput
  upsert: AgentUpsertWithoutOwnedNetworksInput
  connect: AgentWhereUniqueInput
}

input AgentUpdateWithoutEndUserDataInput {
  nickname: String
  email: String
  tag: String
  ownedNetworks: NetworkUpdateManyWithoutMasterInput
  networks: NetworkUpdateManyWithoutSlavesInput
}

input AgentUpdateWithoutNetworksDataInput {
  endUser: EndUserUpdateOneWithoutAgentsInput
  nickname: String
  email: String
  tag: String
  ownedNetworks: NetworkUpdateManyWithoutMasterInput
}

input AgentUpdateWithoutOwnedNetworksDataInput {
  endUser: EndUserUpdateOneWithoutAgentsInput
  nickname: String
  email: String
  tag: String
  networks: NetworkUpdateManyWithoutSlavesInput
}

input AgentUpdateWithWhereUniqueWithoutEndUserInput {
  where: AgentWhereUniqueInput!
  data: AgentUpdateWithoutEndUserDataInput!
}

input AgentUpdateWithWhereUniqueWithoutNetworksInput {
  where: AgentWhereUniqueInput!
  data: AgentUpdateWithoutNetworksDataInput!
}

input AgentUpsertWithoutOwnedNetworksInput {
  update: AgentUpdateWithoutOwnedNetworksDataInput!
  create: AgentCreateWithoutOwnedNetworksInput!
}

input AgentUpsertWithWhereUniqueWithoutEndUserInput {
  where: AgentWhereUniqueInput!
  update: AgentUpdateWithoutEndUserDataInput!
  create: AgentCreateWithoutEndUserInput!
}

input AgentUpsertWithWhereUniqueWithoutNetworksInput {
  where: AgentWhereUniqueInput!
  update: AgentUpdateWithoutNetworksDataInput!
  create: AgentCreateWithoutNetworksInput!
}

input AgentWhereInput {
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  endUser: EndUserWhereInput
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  nickname: String
  nickname_not: String
  nickname_in: [String!]
  nickname_not_in: [String!]
  nickname_lt: String
  nickname_lte: String
  nickname_gt: String
  nickname_gte: String
  nickname_contains: String
  nickname_not_contains: String
  nickname_starts_with: String
  nickname_not_starts_with: String
  nickname_ends_with: String
  nickname_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  tag: String
  tag_not: String
  tag_in: [String!]
  tag_not_in: [String!]
  tag_lt: String
  tag_lte: String
  tag_gt: String
  tag_gte: String
  tag_contains: String
  tag_not_contains: String
  tag_starts_with: String
  tag_not_starts_with: String
  tag_ends_with: String
  tag_not_ends_with: String
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  ownedNetworks_every: NetworkWhereInput
  ownedNetworks_some: NetworkWhereInput
  ownedNetworks_none: NetworkWhereInput
  networks_every: NetworkWhereInput
  networks_some: NetworkWhereInput
  networks_none: NetworkWhereInput
  AND: [AgentWhereInput!]
  OR: [AgentWhereInput!]
  NOT: [AgentWhereInput!]
}

input AgentWhereUniqueInput {
  id: ID
  email: String
}

type AggregateAgent {
  count: Int!
}

type AggregateEndUser {
  count: Int!
}

type AggregateNetwork {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

type EndUser {
  agents(where: AgentWhereInput, orderBy: AgentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Agent!]
  createdAt: DateTime!
  email: String!
  fullName: String
  id: ID!
  updatedAt: DateTime!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
}

type EndUserConnection {
  pageInfo: PageInfo!
  edges: [EndUserEdge]!
  aggregate: AggregateEndUser!
}

input EndUserCreateInput {
  agents: AgentCreateManyWithoutEndUserInput
  email: String!
  fullName: String
  users: UserCreateManyWithoutEndUsersInput
}

input EndUserCreateManyWithoutUsersInput {
  create: [EndUserCreateWithoutUsersInput!]
  connect: [EndUserWhereUniqueInput!]
}

input EndUserCreateOneWithoutAgentsInput {
  create: EndUserCreateWithoutAgentsInput
  connect: EndUserWhereUniqueInput
}

input EndUserCreateWithoutAgentsInput {
  email: String!
  fullName: String
  users: UserCreateManyWithoutEndUsersInput
}

input EndUserCreateWithoutUsersInput {
  agents: AgentCreateManyWithoutEndUserInput
  email: String!
  fullName: String
}

type EndUserEdge {
  node: EndUser!
  cursor: String!
}

enum EndUserOrderByInput {
  createdAt_ASC
  createdAt_DESC
  email_ASC
  email_DESC
  fullName_ASC
  fullName_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type EndUserPreviousValues {
  createdAt: DateTime!
  email: String!
  fullName: String
  id: ID!
  updatedAt: DateTime!
}

input EndUserScalarWhereInput {
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  fullName: String
  fullName_not: String
  fullName_in: [String!]
  fullName_not_in: [String!]
  fullName_lt: String
  fullName_lte: String
  fullName_gt: String
  fullName_gte: String
  fullName_contains: String
  fullName_not_contains: String
  fullName_starts_with: String
  fullName_not_starts_with: String
  fullName_ends_with: String
  fullName_not_ends_with: String
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [EndUserScalarWhereInput!]
  OR: [EndUserScalarWhereInput!]
  NOT: [EndUserScalarWhereInput!]
}

type EndUserSubscriptionPayload {
  mutation: MutationType!
  node: EndUser
  updatedFields: [String!]
  previousValues: EndUserPreviousValues
}

input EndUserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: EndUserWhereInput
  AND: [EndUserSubscriptionWhereInput!]
  OR: [EndUserSubscriptionWhereInput!]
  NOT: [EndUserSubscriptionWhereInput!]
}

input EndUserUpdateInput {
  agents: AgentUpdateManyWithoutEndUserInput
  email: String
  fullName: String
  users: UserUpdateManyWithoutEndUsersInput
}

input EndUserUpdateManyDataInput {
  email: String
  fullName: String
}

input EndUserUpdateManyMutationInput {
  email: String
  fullName: String
}

input EndUserUpdateManyWithoutUsersInput {
  create: [EndUserCreateWithoutUsersInput!]
  delete: [EndUserWhereUniqueInput!]
  connect: [EndUserWhereUniqueInput!]
  set: [EndUserWhereUniqueInput!]
  disconnect: [EndUserWhereUniqueInput!]
  update: [EndUserUpdateWithWhereUniqueWithoutUsersInput!]
  upsert: [EndUserUpsertWithWhereUniqueWithoutUsersInput!]
  deleteMany: [EndUserScalarWhereInput!]
  updateMany: [EndUserUpdateManyWithWhereNestedInput!]
}

input EndUserUpdateManyWithWhereNestedInput {
  where: EndUserScalarWhereInput!
  data: EndUserUpdateManyDataInput!
}

input EndUserUpdateOneWithoutAgentsInput {
  create: EndUserCreateWithoutAgentsInput
  update: EndUserUpdateWithoutAgentsDataInput
  upsert: EndUserUpsertWithoutAgentsInput
  delete: Boolean
  disconnect: Boolean
  connect: EndUserWhereUniqueInput
}

input EndUserUpdateWithoutAgentsDataInput {
  email: String
  fullName: String
  users: UserUpdateManyWithoutEndUsersInput
}

input EndUserUpdateWithoutUsersDataInput {
  agents: AgentUpdateManyWithoutEndUserInput
  email: String
  fullName: String
}

input EndUserUpdateWithWhereUniqueWithoutUsersInput {
  where: EndUserWhereUniqueInput!
  data: EndUserUpdateWithoutUsersDataInput!
}

input EndUserUpsertWithoutAgentsInput {
  update: EndUserUpdateWithoutAgentsDataInput!
  create: EndUserCreateWithoutAgentsInput!
}

input EndUserUpsertWithWhereUniqueWithoutUsersInput {
  where: EndUserWhereUniqueInput!
  update: EndUserUpdateWithoutUsersDataInput!
  create: EndUserCreateWithoutUsersInput!
}

input EndUserWhereInput {
  agents_every: AgentWhereInput
  agents_some: AgentWhereInput
  agents_none: AgentWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  fullName: String
  fullName_not: String
  fullName_in: [String!]
  fullName_not_in: [String!]
  fullName_lt: String
  fullName_lte: String
  fullName_gt: String
  fullName_gte: String
  fullName_contains: String
  fullName_not_contains: String
  fullName_starts_with: String
  fullName_not_starts_with: String
  fullName_ends_with: String
  fullName_not_ends_with: String
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  users_every: UserWhereInput
  users_some: UserWhereInput
  users_none: UserWhereInput
  AND: [EndUserWhereInput!]
  OR: [EndUserWhereInput!]
  NOT: [EndUserWhereInput!]
}

input EndUserWhereUniqueInput {
  email: String
  id: ID
}

scalar Long

type Mutation {
  createAgent(data: AgentCreateInput!): Agent!
  updateAgent(data: AgentUpdateInput!, where: AgentWhereUniqueInput!): Agent
  updateManyAgents(data: AgentUpdateManyMutationInput!, where: AgentWhereInput): BatchPayload!
  upsertAgent(where: AgentWhereUniqueInput!, create: AgentCreateInput!, update: AgentUpdateInput!): Agent!
  deleteAgent(where: AgentWhereUniqueInput!): Agent
  deleteManyAgents(where: AgentWhereInput): BatchPayload!
  createEndUser(data: EndUserCreateInput!): EndUser!
  updateEndUser(data: EndUserUpdateInput!, where: EndUserWhereUniqueInput!): EndUser
  updateManyEndUsers(data: EndUserUpdateManyMutationInput!, where: EndUserWhereInput): BatchPayload!
  upsertEndUser(where: EndUserWhereUniqueInput!, create: EndUserCreateInput!, update: EndUserUpdateInput!): EndUser!
  deleteEndUser(where: EndUserWhereUniqueInput!): EndUser
  deleteManyEndUsers(where: EndUserWhereInput): BatchPayload!
  createNetwork(data: NetworkCreateInput!): Network!
  updateNetwork(data: NetworkUpdateInput!, where: NetworkWhereUniqueInput!): Network
  updateManyNetworks(data: NetworkUpdateManyMutationInput!, where: NetworkWhereInput): BatchPayload!
  upsertNetwork(where: NetworkWhereUniqueInput!, create: NetworkCreateInput!, update: NetworkUpdateInput!): Network!
  deleteNetwork(where: NetworkWhereUniqueInput!): Network
  deleteManyNetworks(where: NetworkWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

type Network {
  id: ID!
  name: String!
  description: String
  master: Agent!
  slaves(where: AgentWhereInput, orderBy: AgentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Agent!]
}

type NetworkConnection {
  pageInfo: PageInfo!
  edges: [NetworkEdge]!
  aggregate: AggregateNetwork!
}

input NetworkCreateInput {
  name: String!
  description: String
  master: AgentCreateOneWithoutOwnedNetworksInput!
  slaves: AgentCreateManyWithoutNetworksInput
}

input NetworkCreateManyWithoutMasterInput {
  create: [NetworkCreateWithoutMasterInput!]
  connect: [NetworkWhereUniqueInput!]
}

input NetworkCreateManyWithoutSlavesInput {
  create: [NetworkCreateWithoutSlavesInput!]
  connect: [NetworkWhereUniqueInput!]
}

input NetworkCreateWithoutMasterInput {
  name: String!
  description: String
  slaves: AgentCreateManyWithoutNetworksInput
}

input NetworkCreateWithoutSlavesInput {
  name: String!
  description: String
  master: AgentCreateOneWithoutOwnedNetworksInput!
}

type NetworkEdge {
  node: Network!
  cursor: String!
}

enum NetworkOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type NetworkPreviousValues {
  id: ID!
  name: String!
  description: String
}

input NetworkScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  AND: [NetworkScalarWhereInput!]
  OR: [NetworkScalarWhereInput!]
  NOT: [NetworkScalarWhereInput!]
}

type NetworkSubscriptionPayload {
  mutation: MutationType!
  node: Network
  updatedFields: [String!]
  previousValues: NetworkPreviousValues
}

input NetworkSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: NetworkWhereInput
  AND: [NetworkSubscriptionWhereInput!]
  OR: [NetworkSubscriptionWhereInput!]
  NOT: [NetworkSubscriptionWhereInput!]
}

input NetworkUpdateInput {
  name: String
  description: String
  master: AgentUpdateOneRequiredWithoutOwnedNetworksInput
  slaves: AgentUpdateManyWithoutNetworksInput
}

input NetworkUpdateManyDataInput {
  name: String
  description: String
}

input NetworkUpdateManyMutationInput {
  name: String
  description: String
}

input NetworkUpdateManyWithoutMasterInput {
  create: [NetworkCreateWithoutMasterInput!]
  delete: [NetworkWhereUniqueInput!]
  connect: [NetworkWhereUniqueInput!]
  set: [NetworkWhereUniqueInput!]
  disconnect: [NetworkWhereUniqueInput!]
  update: [NetworkUpdateWithWhereUniqueWithoutMasterInput!]
  upsert: [NetworkUpsertWithWhereUniqueWithoutMasterInput!]
  deleteMany: [NetworkScalarWhereInput!]
  updateMany: [NetworkUpdateManyWithWhereNestedInput!]
}

input NetworkUpdateManyWithoutSlavesInput {
  create: [NetworkCreateWithoutSlavesInput!]
  delete: [NetworkWhereUniqueInput!]
  connect: [NetworkWhereUniqueInput!]
  set: [NetworkWhereUniqueInput!]
  disconnect: [NetworkWhereUniqueInput!]
  update: [NetworkUpdateWithWhereUniqueWithoutSlavesInput!]
  upsert: [NetworkUpsertWithWhereUniqueWithoutSlavesInput!]
  deleteMany: [NetworkScalarWhereInput!]
  updateMany: [NetworkUpdateManyWithWhereNestedInput!]
}

input NetworkUpdateManyWithWhereNestedInput {
  where: NetworkScalarWhereInput!
  data: NetworkUpdateManyDataInput!
}

input NetworkUpdateWithoutMasterDataInput {
  name: String
  description: String
  slaves: AgentUpdateManyWithoutNetworksInput
}

input NetworkUpdateWithoutSlavesDataInput {
  name: String
  description: String
  master: AgentUpdateOneRequiredWithoutOwnedNetworksInput
}

input NetworkUpdateWithWhereUniqueWithoutMasterInput {
  where: NetworkWhereUniqueInput!
  data: NetworkUpdateWithoutMasterDataInput!
}

input NetworkUpdateWithWhereUniqueWithoutSlavesInput {
  where: NetworkWhereUniqueInput!
  data: NetworkUpdateWithoutSlavesDataInput!
}

input NetworkUpsertWithWhereUniqueWithoutMasterInput {
  where: NetworkWhereUniqueInput!
  update: NetworkUpdateWithoutMasterDataInput!
  create: NetworkCreateWithoutMasterInput!
}

input NetworkUpsertWithWhereUniqueWithoutSlavesInput {
  where: NetworkWhereUniqueInput!
  update: NetworkUpdateWithoutSlavesDataInput!
  create: NetworkCreateWithoutSlavesInput!
}

input NetworkWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  master: AgentWhereInput
  slaves_every: AgentWhereInput
  slaves_some: AgentWhereInput
  slaves_none: AgentWhereInput
  AND: [NetworkWhereInput!]
  OR: [NetworkWhereInput!]
  NOT: [NetworkWhereInput!]
}

input NetworkWhereUniqueInput {
  id: ID
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  agent(where: AgentWhereUniqueInput!): Agent
  agents(where: AgentWhereInput, orderBy: AgentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Agent]!
  agentsConnection(where: AgentWhereInput, orderBy: AgentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AgentConnection!
  endUser(where: EndUserWhereUniqueInput!): EndUser
  endUsers(where: EndUserWhereInput, orderBy: EndUserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [EndUser]!
  endUsersConnection(where: EndUserWhereInput, orderBy: EndUserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EndUserConnection!
  network(where: NetworkWhereUniqueInput!): Network
  networks(where: NetworkWhereInput, orderBy: NetworkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Network]!
  networksConnection(where: NetworkWhereInput, orderBy: NetworkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): NetworkConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  agent(where: AgentSubscriptionWhereInput): AgentSubscriptionPayload
  endUser(where: EndUserSubscriptionWhereInput): EndUserSubscriptionPayload
  network(where: NetworkSubscriptionWhereInput): NetworkSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  name: String
  endUsers(where: EndUserWhereInput, orderBy: EndUserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [EndUser!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  name: String
  endUsers: EndUserCreateManyWithoutUsersInput
}

input UserCreateManyWithoutEndUsersInput {
  create: [UserCreateWithoutEndUsersInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateWithoutEndUsersInput {
  name: String
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  name: String
}

input UserScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  name: String
  endUsers: EndUserUpdateManyWithoutUsersInput
}

input UserUpdateManyDataInput {
  name: String
}

input UserUpdateManyMutationInput {
  name: String
}

input UserUpdateManyWithoutEndUsersInput {
  create: [UserCreateWithoutEndUsersInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutEndUsersInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutEndUsersInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateWithoutEndUsersDataInput {
  name: String
}

input UserUpdateWithWhereUniqueWithoutEndUsersInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutEndUsersDataInput!
}

input UserUpsertWithWhereUniqueWithoutEndUsersInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutEndUsersDataInput!
  create: UserCreateWithoutEndUsersInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  endUsers_every: EndUserWhereInput
  endUsers_some: EndUserWhereInput
  endUsers_none: EndUserWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
}
`